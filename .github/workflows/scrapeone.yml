# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI olx

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    # The 'environment' key is used for deployment environments, not for passing variables directly into a job's shell.
    # If you intend to use a specific deployment environment for this job, then 'environment: ${{ inputs.environment }}' is correct,
    # but it won't directly make `inputs.environment` available as an environment variable in your shell.
    # If `inputs.environment` is intended to be the name of a GitHub environment you've configured, this is correct for linking.
    # However, if you're trying to dynamically pass an environment name that will then be used to fetch variables,
    # you'd need to adapt how those variables are retrieved or if the job truly depends on a named environment for secrets/variables.
    # For now, I'll assume you have a configured GitHub Environment.
    environment: production # Or whatever your environment name is, if you're not getting it from 'inputs'

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install ts-node -g && which ts-node
    - name: Set DATABASE_URL environment variable and run scrapper
      env:
        DATABASE_URL: ${{ vars.DATABASE_URL }}
      run: |
        echo "DATABASE_URL is set." # Optional: Verify it's set
        cd ./bitpazar/scrapper
        ls -lah
        npm install
        npx tsx ./action.ts
